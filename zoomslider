// Simple Zoom Slider for Leaflet
import L, { Control, Map, DomUtil, DomEvent, Draggable, Point } from 'leaflet';

class SimpleKnob extends Draggable {
  private _element: HTMLElement;
  private _maxSteps!: number;
  private _k!: number;
  private _m!: number;

  constructor(element: HTMLElement, maxSteps: number) {
    super(element, element);
    this._element = element;
    this._maxSteps = maxSteps;

    this.on('predrag', () => {
      this._newPos.x = 0;
      this._newPos.y = this._adjust(this._newPos.y);
    });
  }

  private _adjust(y: number): number {
    let value = Math.round(this._toValue(y));
    value = Math.max(0, Math.min(this._maxSteps, value));
    return this._toY(value);
  }

  private _toY(value: number): number {
    return this._k * value + this._m;
  }

  private _toValue(y: number): number {
    return (y - this._m) / this._k;
  }

  setSteps(steps: number) {
    const sliderHeight = 100; // Match your bar height
    this._maxSteps = steps - 1;
    this._k = -sliderHeight / this._maxSteps;
    this._m = sliderHeight;
  }

  setPosition(y: number) {
    DomUtil.setPosition(this._element, new Point(0, this._adjust(y)));
  }

  setValue(v: number) {
    this.setPosition(this._toY(v));
  }

  getValue(): number {
    return this._toValue(DomUtil.getPosition(this._element).y);
  }
}

export function createSimpleZoomSlider(map: Map): HTMLElement {
  const container = DomUtil.create('div', 'custom-zoom-slider');
  const knob = DomUtil.create('div', 'custom-zoom-knob', container);

  const steps = map.getMaxZoom() - map.getMinZoom() + 1;
  const simpleKnob = new SimpleKnob(knob, steps);
  simpleKnob.enable();
  simpleKnob.setSteps(steps);

  map.on('zoomend', () => {
    simpleKnob.setValue(map.getZoom() - map.getMinZoom());
  });

  simpleKnob.on('dragend', () => {
    map.setZoom(Math.round(simpleKnob.getValue()) + map.getMinZoom());
  });

  return container;
}
